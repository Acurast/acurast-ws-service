---
include:
  - project: "papers/papers-internal/internal"
    file: "/.base-gitlab-ci.yml"

variables:
  NAMESPACE: "websocket-proxy"
  ANSIBLE_HOST_KEY_CHECKING: 'false'
  ANSIBLE_FORCE_COLOR: 'true'


stages:
  - build
  - test
  - run-ansible


build:
  stage: build
  extends: .build

test:
  stage: test
  script:
    - docker run $GOOGLE_TAG bash -c "yarn test:ci"


# publish-dev:
#   stage: publish
#   extends: .publish-dev

# publish-prod:
#   stage: publish
#   extends: .publish-prod


# .deployment_script:
#   script:
#     # seds
#     - find k8s -type f -name \*.yaml -exec sed -i "s|__NAMESPACE_NAME__|"$NAMESPACE"|g" {} +
#     - find k8s -type f -name \*.yaml -exec sed -i "s|__TO_BE_REPLACED_BY_IMAGE_TAG__|"$IMAGE_TAG"|g" {} +

#     # applying the files
#     - kubectl apply -f k8s/common/namespace.yaml
#     # - kubectl apply -f k8s/common/secret.yaml
#     - kubectl apply -f k8s/$CI_ENVIRONMENT_NAME/ --recursive
#     - kubectl apply -f k8s/common/ --recursive



# k8s-deploy-development:
#   stage: deploy
#   extends: .run_dev
#   when: manual
#   needs: ["publish-dev"]
#   variables:
#     IMAGE_TAG: $GOOGLE_TAG_DEV
#   script:
#     - !reference [.deployment_script, script]
#   environment: 
#     name: development
#     url: https://websocket-proxy.dev.gke.papers.tech


# k8s-deploy-development-2:
#   stage: deploy
#   extends: .run_dev
#   when: manual
#   needs: ["publish-dev"]
#   variables:
#     IMAGE_TAG: $GOOGLE_TAG_DEV
#     NAMESPACE: "websocket-proxy-2"
#   script:
#     - !reference [.deployment_script, script]
#   environment: 
#     name: development-2
#     url: https://websocket-proxy-2.dev.gke.papers.tech

# k8s-deploy-production:
#   stage: deploy
#   when: manual
#   extends: .run_prod
#   needs: ["publish-prod"]
#   variables:
#     IMAGE_TAG: $GOOGLE_TAG
#   script:
#     - !reference [.deployment_script, script]
#   environment: 
#     name: production
#     url: https://websocket-proxy.prod.gke.papers.tech


.pre_ansible_script:
  extends: .run_dev
  image: python:3.11
  before_script:
    - apt-get update && apt-get install sshpass -y
    - pip install ansible ansible-lint


.run_playbook:
  stage: run-ansible
  extends: .pre_ansible_script
  when: manual
  script:
    - echo BASE_ARGS are $BASE_ARGS
    - echo EXTRA_ARGS are $EXTRA_ARGS
    - echo ADDITIONAL_ARGS are $ADDITIONAL_ARGS
    # yamllint disable-line rule:line-length
    - ansible-playbook $ANSIBLE_PLAYBOOK -i infra/inventory.yaml --extra-vars "git_sha=$CI_COMMIT_SHA" --vault-password-file $vaultpassword $BASE_ARGS $EXTRA_ARGS $ADDITIONAL_ARGS

server_1_initial:
  extends: .run_playbook
  variables:
    ANSIBLE_PLAYBOOK: infra/playbooks/node-setup.yaml
    EXTRA_ARGS: --limit ws-proxy-server-1
  environment: ws-proxy-server-1

server_2_initial:
  extends: .run_playbook
  variables:
    ANSIBLE_PLAYBOOK: infra/playbooks/node-setup.yaml
    EXTRA_ARGS: --limit ws-proxy-server-2
  environment: ws-proxy-server-2

server_1_update:
  extends: .run_playbook
  variables:
    ANSIBLE_PLAYBOOK: infra/playbooks/node-setup.yaml
    EXTRA_ARGS: --tags=update --limit ws-proxy-server-1
  environment: ws-proxy-server-1

server_2_update:
  extends: .run_playbook
  variables:
    ANSIBLE_PLAYBOOK: infra/playbooks/node-setup.yaml
    EXTRA_ARGS: --tags=update --limit ws-proxy-server-2
  environment: ws-proxy-server-2

server_1_any_playbook:
  extends: .run_playbook
  variables:
    EXTRA_ARGS: --limit ws-proxy-server-1
  environment: ws-proxy-server-1

server_2_any_playbook:
  extends: .run_playbook
  variables:
    EXTRA_ARGS: --limit ws-proxy-server-2
  environment: ws-proxy-server-2
